<?php

namespace App\Http\Controllers;

use App\Models\History;
use App\Traits\CommonTrait;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;

class SubtitleController extends Controller
{
    use CommonTrait;

    private $youtubeApiKey;

    public function __construct()
    {
        $this->youtubeApiKey = env('YOUTUBE_API_KEY');
    }

    public function extractSubtitles(Request $request)
    {
        try {
            // Validate the input URL
            $validated = $request->validate([
                'link' => 'required|url',
            ]);

            $link = $validated['link'];
            $videoId = $this->extractVideoId($link);

            if (!$videoId) {
                Log::error('Invalid YouTube link', ['link' => $link]);
                return response()->json(['error' => 'Invalid YouTube link.'], 400);
            }

            // Fetch video details
            $videoDetails = $this->fetchVideoDetails($videoId);

            if (!$videoDetails) {
                Log::error('Failed to retrieve video details', ['videoId' => $videoId]);
                return response()->json(['error' => 'Failed to retrieve video details.'], 500);
            }

            // Try to get manual captions first
            $captionUrl = $this->getCaptionUrl($videoId);

            // If manual captions are not available, try to get auto-generated captions
            if (!$captionUrl) {
                $captionUrl = $this->getAutoGeneratedCaptionUrl($videoId);
            }

            if (!$captionUrl) {
                Log::error('No subtitles available', ['videoId' => $videoId]);
                return response()->json(['error' => 'No subtitles available for this video.'], 404);
            }

            // Download and process the subtitles
            $subtitleContent = $this->downloadSubtitles($captionUrl);

            if (!$subtitleContent) {
                Log::error('Failed to download subtitles', ['captionUrl' => $captionUrl]);
                return response()->json(['error' => 'Failed to download subtitles.'], 500);
            }

            // Sanitize the video title to create a valid filename
            $sanitizedTitle = Str::slug($videoDetails['title'], '-');

            $subtitlesDir = public_path('subtitles');
            if (!is_dir($subtitlesDir)) {
                if (!mkdir($subtitlesDir, 0777, true)) {
                    Log::error('Failed to create subtitles directory', ['path' => $subtitlesDir]);
                    return response()->json(['error' => 'Failed to create subtitles directory.'], 500);
                }
            }

            // Define the subtitle paths using sanitized title
            $subtitleSrtPath = public_path('subtitles/' . $sanitizedTitle . '.srt');
            $subtitleTxtPath = public_path('subtitles/' . $sanitizedTitle . '.txt');

            // Save the subtitle content to the .srt file
            if (file_put_contents($subtitleSrtPath, $this->convertToSRT($subtitleContent)) === false) {
                Log::error('Failed to save SRT file', ['path' => $subtitleSrtPath]);
                return response()->json(['error' => 'Failed to save SRT file.'], 500);
            }

            // Convert to plain text and save it to the .txt file
            $plainTextContent = $this->convertToPlainText($subtitleContent);
            if (file_put_contents($subtitleTxtPath, $plainTextContent) === false) {
                Log::error('Failed to save TXT file', ['path' => $subtitleTxtPath]);
                return response()->json(['error' => 'Failed to save TXT file.'], 500);
            }

            if ($link && $videoDetails) {
                $old_history = History::where('url', $link)->first();
                if (!$old_history) {
                    $history = new History();
                    $history->source = 'Youtube';
                    $history->title = $videoDetails['title'];
                    $history->url = $link;
                    $history->save();
                }
            }

            // Return video metadata and subtitle download links
            return $this->sendResponse([
                'videoLink' => $link,
                'videoID' => $videoId,
                'video' => $videoDetails,
                'srt' => asset('subtitles/' . $sanitizedTitle . '.srt'),
                'txt' => asset('subtitles/' . $sanitizedTitle . '.txt'),
                'raw' => $subtitleContent,
            ]);
        } catch (\Exception $e) {
            Log::error('Exception in extractSubtitles', [
                'message' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return response()->json(['error' => 'An unexpected error occurred: ' . $e->getMessage()], 500);
        }
    }

    private function extractVideoId($url)
    {
        // Extract video ID from YouTube URL
        preg_match("/(youtu\.be\/|v=)([^&]+)/", $url, $matches);
        return $matches[2] ?? null;
    }

    private function fetchVideoDetails($videoId)
    {
        // YouTube Data API URL
        $url = "https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails&id={$videoId}&key={$this->youtubeApiKey}";

        $response = Http::timeout(10)->get($url);
        if ($response->successful()) {
            $data = $response->json();
            $item = $data['items'][0];

            return [
                'title' => $item['snippet']['title'],
                'thumbnail' => $item['snippet']['thumbnails']['high']['url'],
                'duration' => $this->convertDuration($item['contentDetails']['duration']),
                'has_captions' => isset($item['contentDetails']['caption']) && $item['contentDetails']['caption'] === 'true',
            ];
        }

        return null;
    }

    private function getCaptionUrl($videoId)
    {
        $videoPageUrl = "https://www.youtube.com/watch?v=" . $videoId;
    
        // Using cURL instead of file_get_contents
        $ch = curl_init($videoPageUrl);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);
        $videoPageContent = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
    
        if ($httpCode !== 200) {
            Log::error("Failed to load video page", ['videoId' => $videoId, 'httpCode' => $httpCode]);
            return null;
        }
    
        if (preg_match('/"captionTracks":\[(.*?)\]/', $videoPageContent, $matches)) {
            $captionTracksJson = $matches[1];
            $captionTracks = json_decode("[$captionTracksJson]", true);
    
            foreach ($captionTracks as $track) {
                if ($track['languageCode'] === 'en' && $track['kind'] !== 'asr') {
                    return $track['baseUrl'];
                }
            }
        }
    
        Log::error("No captions found", ['videoId' => $videoId]);
        return null;
    }

    private function getAutoGeneratedCaptionUrl($videoId)
    {
        // Get video page content
        $videoPageUrl = "https://www.youtube.com/watch?v=" . $videoId;
        $videoPageContent = file_get_contents($videoPageUrl);

        // Extract caption tracks URL
        if (preg_match('/"captionTracks":\[(.*?)\]/', $videoPageContent, $matches)) {
            $captionTracksJson = $matches[1];

            // Decode JSON and get the auto-generated caption track URL
            $captionTracks = json_decode("[$captionTracksJson]", true);
            foreach ($captionTracks as $track) {
                if ($track['languageCode'] === 'en' && $track['kind'] === 'asr') {
                    return $track['baseUrl'];
                }
            }
        }

        return null;
    }

    private function downloadSubtitles($captionUrl)
    {
        $srtUrl = $captionUrl . '&fmt=srv3';

        $ch = curl_init($srtUrl);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
        $subtitleContent = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);

        if ($httpCode === 200) {
            return $subtitleContent;
        } else {
            Log::error("Failed to download subtitles", ['httpCode' => $httpCode, 'url' => $srtUrl]);
            return null;
        }
    }

    private function convertToSRT($subtitleContent)
    {
        // Return raw content for SRT (can be parsed further if needed)
        return strip_tags($subtitleContent);
    }

    private function convertToPlainText($subtitleContent)
    {
        // Strip out tags and return plain text
        return strip_tags($subtitleContent);
    }

    private function convertDuration($duration)
    {
        $interval = new \DateInterval($duration);
        return $interval->format('%H:%I:%S');
    }

    public function translate(Request $request)
    {
        // dd($request);
        $request->validate([
            'text' => 'required|string',
            'targetLanguage' => 'required|string|size:2',
        ]);

        $apiKey = env('YANDEX_API_KEY');
        $folderId = env('YANDEX_FOLDER_ID');
        $apiUrl = 'https://translate.api.cloud.yandex.net/translate/v2/translate';

        try {
            $response = Http::withHeaders([
                'Authorization' => "Api-Key {$apiKey}",
                'Content-Type' => 'application/json',
            ])->post($apiUrl, [
                'folderId' => $folderId,
                'texts' => [$request->text],
                'targetLanguageCode' => $request->targetLanguage,
            ]);

            if ($response->successful()) {
                return response()->json($response->json());
            } else {
                Log::error('Yandex API Error', [
                    'status' => $response->status(),
                    'body' => $response->body(),
                    'headers' => $response->headers()
                ]);
                return response()->json(['error' => 'Translation failed: ' . $response->body()], $response->status());
            }
        } catch (\Exception $e) {
            Log::error('Yandex API Exception', [
                'message' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return response()->json(['error' => 'Translation service unavailable: ' . $e->getMessage()], 503);
        }
    }

}
